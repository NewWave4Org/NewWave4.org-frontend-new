import axios from 'axios';
import { toast } from 'react-toastify';
import { ApiEndpoint } from './enums/api-endpoint';

let isRefreshing = false;
let failedQueue: any[] = [];

const processQueue = (error: any, token: string | null = null) => {
  failedQueue.forEach(prom => {
    if (error) {
      prom.reject(error); // ‚Üí —Ü–µ –æ–±—Ä–æ–±–∏—Ç—å .catch
    } else {
      prom.resolve(token); // ‚Üí —Ü–µ –æ–±—Ä–æ–±–∏—Ç—å .then
    }
  });
  failedQueue = [];
};

export const axiosInstance = axios.create({
  // baseURL: 'http://localhost:8080/api/v1/',
  baseURL: 'https://api.stage.newwave4.org/api/v1/',
  withCredentials: true,
  headers: {
    'Content-Type': 'application/json',
    Accept: 'application/json',
  },
});

axiosInstance.interceptors.response.use(
  response => {
    console.log('‚úÖ –í—ñ–¥–ø–æ–≤—ñ–¥—å —É—Å–ø—ñ—à–Ω–∞:', response.config.url);
    return response;
  },
  async error => {
    const originalRequest = error.config;

    console.warn(
      '‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ:',
      error.response?.status,
      originalRequest?.url,
    );

    if (
      error.response?.status === 401 &&
      !originalRequest._retry &&
      !originalRequest.url.includes(ApiEndpoint.REFRESHTOKEN)
    ) {
      originalRequest._retry = true;

      console.warn('üîÅ –ù–µ–∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–∏–π ‚Äî —Å–ø—Ä–æ–±–∞ –æ–Ω–æ–≤–∏—Ç–∏ —Ç–æ–∫–µ–Ω...');

      if (isRefreshing) {
        console.log('‚è≥ –û—á—ñ–∫—É—î–º–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞...');
        return new Promise((resolve, reject) => {
          failedQueue.push({ resolve, reject });
        })
          .then(() => axiosInstance(originalRequest))
          .catch(err => {
            console.error('‚õî –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä—ñ –∑–∞–ø–∏—Ç—É:', err);
            return Promise.reject(err);
          });
      }

      isRefreshing = true;

      try {
        console.log('üîê –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ refresh token –∑–∞–ø–∏—Ç...');
        await axiosInstance.post(ApiEndpoint.REFRESHTOKEN);

        processQueue(null); // <--- –≤–∏–∫–ª–∏—á–µ –≤—Å—ñ resolve(token)

        console.log(
          'üì§ –ü–æ–≤—Ç–æ—Ä–Ω–æ –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π –∑–∞–ø–∏—Ç:',
          originalRequest.url,
        );
        return axiosInstance(originalRequest);
      } catch (refreshError) {
        console.error('‚õî –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ –≤–¥–∞–ª–æ—Å—è:', refreshError);

        processQueue(refreshError); // <--- –≤–∏–∫–ª–∏—á–µ –≤—Å—ñ reject(refreshError)

        toast.error('–°–µ—Å—ñ—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£–≤—ñ–π–¥—ñ—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ.');

        if (typeof window !== 'undefined') {
          console.log('üö™ –†–µ–¥—ñ—Ä–µ–∫—Ç –Ω–∞ /admin');
          window.location.href = '/admin';
        }

        return Promise.reject(refreshError);
      } finally {
        isRefreshing = false;
      }
    }

    return Promise.reject(error);
  },
);
