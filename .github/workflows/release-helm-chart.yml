name: Release Helm Chart

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Chart version (e.g., 0.1.0)'
        required: true
      update_app_version:
        description: 'Update app version to match latest Docker image'
        type: boolean
        default: true

jobs:
  release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pull-requests: write

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set Org Lowercase
        run: echo "ORG=$(echo '${{ github.repository_owner }}' | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: 'v3.14.4' # pin for stability

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Update Chart Version
        run: |
          set -euo pipefail
          sed -i "s/^version:.*/version: ${{ github.event.inputs.version }}/" helm/frontend-chart/Chart.yaml
          if [[ "${{ github.event.inputs.update_app_version }}" == "true" ]]; then
            sed -i 's/^appVersion:.*/appVersion: "latest"/' helm/frontend-chart/Chart.yaml
          fi
          cat helm/frontend-chart/Chart.yaml

      - name: (Optional) Update deps
        if: ${{ always() }}
        run: |
          set -euo pipefail
          helm dependency update helm/frontend-chart || true

      - name: Login to GHCR for Helm (OCI)
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | helm registry login ghcr.io \
            --username "${{ github.actor }}" --password-stdin

      - name: Package Helm Chart
        id: pkg
        run: |
          set -euo pipefail
          PKG_FILE=$(helm package helm/frontend-chart | awk '{print $NF}')
          echo "pkg=${PKG_FILE}" >> $GITHUB_OUTPUT

      - name: Push Helm Chart to GHCR
        run: |
          set -euo pipefail
          helm push "${{ steps.pkg.outputs.pkg }}" oci://ghcr.io/${{ env.ORG }}/charts
          echo "Pulling the chart to verify it exists..."
          helm pull oci://ghcr.io/${{ env.ORG }}/charts/newwave4-frontend-chart \
            --version "${{ github.event.inputs.version }}"
          ls -la "newwave4-frontend-chart-${{ github.event.inputs.version }}.tgz"